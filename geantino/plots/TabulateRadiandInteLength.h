double RinRadiLengthFunc(double *x, double *par)
{
double RMin = 183;
double RMax = 273;
const int nBins = 360;
double binWidth = (RMax-RMin)/nBins;

double RinRadiLength[nBins+1]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00525936, 0.0192628, 0.061549, 0.111182, 0.152168, 0.202359, 0.227625, 0.32467, 0.326714, 0.32672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.59222, 3.59879, 3.59879, 3.60741, 3.61894, 3.65617, 3.70085, 3.74492, 3.78724, 3.83912, 3.88666, 3.93792, 3.94077, 3.94077, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.78774, 7.79, 7.79179, 7.82416, 7.86589, 7.89949, 7.94144, 7.99066, 8.04843, 8.08983, 8.14582, 8.14651, 8.15052, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12.6804, 12.6799, 12.6862, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20.1306, 20.1297, 20.1366, 0, 0, 20.1623, 20.1617, 20.1793, 20.2296, 20.2945, 20.323, 20.3709, 20.4209, 20.4589, 20.5234, 20.5448, 20.5972, 20.6474, 20.6947, 20.7398, 20.7757, 20.8202, 20.8857, 20.9127, 20.9567, 21.0357, 21.03, 21.0451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36.7828, 36.7815, 36.7961, 0, 0, 36.8363, 36.8724, 36.9036, 36.9619, 36.9919, 37.0383, 37.1013, 37.1451, 0, 0, 37.2745, 37.3197, 37.3633, 37.3943, 37.4499, 37.5053, 37.5471, 37.5762, 37.6337, 37.6875, 37.7139, 37.7622, 37.8196, 37.8271, 37.8285, 44.8171 };


int iBin = (int)((x[0]-RMin)/binWidth);
double dR = x[0] - RMin - iBin*binWidth;
return ((1.-dR/binWidth)*RinRadiLength[iBin] + dR/binWidth*RinRadiLength[iBin+1]);
}


double RinInteLengthFunc(double *x, double *par)
{
double RMin = 183;
double RMax = 273;
const int nBins = 360;
double binWidth = (RMax-RMin)/nBins;

double RinInteLength[nBins+1]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.000710058, 0.00260064, 0.00830964, 0.0150105, 0.020544, 0.0273202, 0.0307313, 0.0438332, 0.0441092, 0.04411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.390176, 0.391064, 0.391064, 0.392227, 0.393785, 0.398811, 0.404843, 0.410793, 0.416506, 0.42351, 0.429929, 0.43685, 0.437234, 0.437234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.845034, 0.845339, 0.845581, 0.849952, 0.855584, 0.860121, 0.865785, 0.872429, 0.880229, 0.885819, 0.893377, 0.893471, 0.894013, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.37417, 1.3741, 1.37495, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.16415, 2.16402, 2.16495, 0, 0, 2.16843, 2.16834, 2.17072, 2.17751, 2.18627, 2.19012, 2.19659, 2.20334, 2.20847, 2.21718, 2.22006, 2.22714, 2.23391, 2.24031, 2.24639, 2.25124, 2.25725, 2.26609, 2.26974, 2.27568, 2.28635, 2.28557, 2.28761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.95597, 3.9558, 3.95777, 0, 0, 3.9632, 3.96807, 3.97229, 3.98016, 3.9842, 3.99047, 3.99897, 4.00488, 0, 0, 4.02236, 4.02846, 4.03435, 4.03854, 4.04604, 4.05352, 4.05916, 4.06309, 4.07085, 4.07812, 4.08168, 4.0882, 4.09595, 4.09697, 4.09716, 4.83808 };


int iBin = (int)((x[0]-RMin)/binWidth);
double dR = x[0] - RMin - iBin*binWidth;
return ((1.-dR/binWidth)*RinInteLength[iBin] + dR/binWidth*RinInteLength[iBin+1]);
}
